/**********************************************************************
 Grammar for Little programs
 **********************************************************************/
program		::= declList
		;

declList 	::= declList decl
		| /* epsilon */
		;

decl		::= varDecl
		| fnDecl
		;

varDeclList 	::= varDeclList varDecl
		| /* epsilon */
		;

varDecl		::= type id SEMICOLON
		;

fnDecl		::= type id formals fnBody
		;

formals		::= LPAREN RPAREN
		| LPAREN formalsList RPAREN
		;

formalsList	::= formalDecl
		| formalDecl COMMA formalsList
		;

formalDecl	::= type id
		;

fnBody		::= LCURLY varDeclList stmtList RCURLY
		;

stmtList	::= stmtList stmt
		| /* epsilon */
		;

stmt		::= assign_exp SEMICOLON
		| PLUSPLUS id SEMICOLON
		| MINUSMINUS id SEMICOLON
		| id PLUSPLUS SEMICOLON
		| id MINUSMINUS SEMICOLON
	        | SCANF LPAREN INT_FORMAT COMMA AMPERSAND id RPAREN SEMICOLON
	        | SCANF LPAREN DBL_FORMAT COMMA AMPERSAND id RPAREN SEMICOLON
		| PRINTF LPAREN INT_FORMAT COMMA exp RPAREN SEMICOLON
		| PRINTF LPAREN DBL_FORMAT COMMA exp RPAREN SEMICOLON
		| PRINTF LPAREN STRINGLITERAL RPAREN SEMICOLON
	        | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
	        | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
	        | WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
		| RETURN exp SEMICOLON
		| RETURN SEMICOLON
		| fncall SEMICOLON
		;

fncall		::=  id LPAREN RPAREN   // fn call with no args
	        | id LPAREN actualList RPAREN  // with args
		;

exp		::= assign_exp
          | prec5
          ;

prec5 ::=
	          prec5 AND prec4
	        | prec5 OR prec4
          ;

prec4 ::=
            prec3 EQUALS prec3
          | prec3 NOTEQUALS prec3
          | prec3 LESS prec3
          | prec3 GREATER prec3
          | prec3 LESSEQ prec3
          | prec3 GREATEREQ prec3
          ;

prec3 ::=
	          prec3 PLUS prec2
	        | prec3 MINUS prec2
          ;

prec2 ::=
	          prec2 STAR prec1
	        | prec2 DIVIDE prec1
          ;

prec1 ::=
	          NOT term
          | MINUS term
          | term
          ;

assign_exp	::= id ASSIGN exp
		;

term		::= id
          | id PLUSPLUS
          | id MINUSMINUS
	        | INTLITERAL
	        | DBLLITERAL
	        | STRINGLITERAL
	        | LPAREN exp RPAREN
          | fncall
          ;

actualList	::= exp
		| actualList COMMA exp
		;

type		::= INT
		| DBL
		| VOID
		;

id              ::= ID
		;

