/**********************************************************************
 Java CUP specification for a parser for Little programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}

:};


/* Terminals (tokens returned by the scanner) */
terminal 	        INT;
terminal 	        VOID;
terminal 	        DBL;
terminal 	        IF;
terminal 	        ELSE;
terminal 	        WHILE;
terminal 	        RETURN;
terminal 	        SCANF;
terminal 	        PRINTF;
terminal 	        INT_FORMAT;
terminal 	        DBL_FORMAT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal DblLitTokenVal DBLLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal 	        LCURLY;
terminal 	        RCURLY;
terminal 	        LPAREN;
terminal 	        RPAREN;
terminal 	        COMMA;
terminal 	        ASSIGN;
terminal 	        SEMICOLON;
terminal 	        PLUS;
terminal 	        MINUS;
terminal 	        STAR;
terminal 	        DIVIDE;
terminal 	        PLUSPLUS;
terminal 	        MINUSMINUS;
terminal 	        NOT;
terminal 	        AND;
terminal 	        OR;
terminal 	        EQUALS;
terminal 	        NOTEQUALS;
terminal 	        LESS;
terminal 	        GREATER;
terminal 	        LESSEQ;
terminal 	        GREATEREQ;
terminal 	        AMPERSAND;

/* Non-terminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

non terminal ProgramNode      program;
non terminal LinkedList	      declList;
non terminal DeclNode	      decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode	      type;
non terminal IdNode	      id;

non terminal LinkedList        varDeclList ;
non terminal FnDeclNode        fnDecl      ;
non terminal FormalsListNode   formals     ;
non terminal LinkedList        formalsList ;
non terminal FormalDeclNode    formalDecl  ;
non terminal FnBodyNode        fnBody      ;
non terminal LinkedList        stmtList    ;
non terminal StmtNode          stmt        ;
non terminal CallExpNode       fncall      ;
non terminal ExpNode           exp         ;
non terminal AssignNode        assign_exp  ;
non terminal ExpNode           term        ;
non terminal LinkedList        actualList  ;

/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left STAR, DIVIDE;

start with program;

/* grammar with actions
 *
 * NOTE: add more grammar rules below
 */

program		::= declList: d
		{: RESULT = new ProgramNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: dl.addLast(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<DeclNode>();
		:}
		;

decl		::=
    varDecl:v
      {: RESULT = v;
      :}
    |
    fnDecl:f
      {: RESULT = f;
      :}
		;

varDeclList ::=
    varDeclList:dl varDecl:d
      {: dl.addLast(d);
         RESULT = dl;
      :}
    | /* epsilon */
      {: RESULT = new LinkedList<DeclNode>();
      :}
    ;

varDecl		::= type:t id:i SEMICOLON
		{: RESULT = new VarDeclNode(t, i);
		:}
		;

fnDecl ::= type:t id:name formals:args fnBody:body
    {: RESULT = new FnDeclNode(t, name, args, body);
    :}
    ;

formals ::=
    LPAREN RPAREN
      {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
      :}
    |
    LPAREN formalsList:dl RPAREN
      {: RESULT = new FormalsListNode(dl);
      :}
    ;

formalsList	::= 
    formalDecl:d
      {:
        LinkedList<FormalDeclNode> dl = new LinkedList<FormalDeclNode>();
        dl.addLast(d);
        RESULT = dl;
      :}
		|
    formalDecl:d COMMA formalsList:dl
      {: dl.addLast(d);
         RESULT = dl;
      :}
		;

formalDecl	::=
    type:t id:i
      {: RESULT = new FormalDeclNode(t, i);
      :}
		;

fnBody		::= 
    LCURLY varDeclList:vdl stmtList:sdl RCURLY
    {:
      RESULT = new FnBodyNode(new DeclListNode(vdl), new StmtListNode(sdl));
    :}
		;

stmtList	::= 
    stmtList:sl stmt:s
    {:
      sl.addLast(s);
      RESULT = sl;
    :}
		| /* epsilon */
    {: RESULT = new LinkedList<StmtNode>();
    :}
		;

stmt ::=
    assign_exp:e SEMICOLON
      {: RESULT = new AssignStmtNode(e);
      :}
		| PLUSPLUS id:i SEMICOLON
      {: RESULT = new PreIncStmtNode(i);
      :}
		| MINUSMINUS id:i SEMICOLON
      {: RESULT = new PreDecStmtNode(i);
      :}
		| id:i PLUSPLUS SEMICOLON
      {: RESULT = new PostIncStmtNode(i);
      :}
		| id:i MINUSMINUS SEMICOLON
      {: RESULT = new PostDecStmtNode(i);
      :}
    | SCANF LPAREN INT_FORMAT COMMA AMPERSAND id:i RPAREN SEMICOLON
      {: RESULT = new ReadIntStmtNode(i);
      :}
    | SCANF LPAREN DBL_FORMAT COMMA AMPERSAND id:i RPAREN SEMICOLON
      {: RESULT = new ReadDblStmtNode(i);
      :}
		| PRINTF LPAREN INT_FORMAT COMMA exp:e RPAREN SEMICOLON
      {: RESULT = new WriteIntStmtNode(e);
      :}
		| PRINTF LPAREN DBL_FORMAT COMMA exp:e RPAREN SEMICOLON
      {: RESULT = new WriteDblStmtNode(e);
      :}
		| PRINTF LPAREN STRINGLITERAL:s RPAREN SEMICOLON
      {: RESULT = new WriteStrStmtNode(new StringLitNode(s.linenum, s.charnum, s.strVal));
      :}
    | IF LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList:sl RCURLY
      {: RESULT = new IfStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
      :}
    | IF LPAREN exp:e RPAREN LCURLY varDeclList:vl1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:vl2 stmtList:sl2 RCURLY
      {: RESULT = new IfElseStmtNode(e, new DeclListNode(vl1), new StmtListNode(sl1),
                                     new DeclListNode(vl2), new StmtListNode(sl2));
      :}
    | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList:sl RCURLY
      {: RESULT = new WhileStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
      :}
		| RETURN exp:e SEMICOLON
      {: RESULT = new ReturnStmtNode(e);
      :}
		| RETURN SEMICOLON
      {: RESULT = new ReturnStmtNode(null);
      :}
		| fncall:call SEMICOLON
      {: RESULT = new CallStmtNode(call);
      :}
		;

fncall ::=  
    id:i LPAREN RPAREN
      {:
        LinkedList<ExpNode> arglist = new LinkedList<ExpNode>();
        RESULT = new CallExpNode(i, new ExpListNode(arglist));
      :}
    |
    id:i LPAREN actualList:arglist RPAREN
      {: RESULT = new CallExpNode(i, new ExpListNode(arglist));
      :}
		;

exp		::=
    assign_exp:e
      {: RESULT = e;
      :}
		|
    exp:e1 PLUS exp:e2
      {: RESULT = new PlusNode(e1, e2);
      :}
    |
    exp:e1 MINUS exp:e2
      {: RESULT = new MinusNode(e1, e2);
      :}
    |
    exp:e1 STAR exp:e2
      {: RESULT = new TimesNode(e1, e2);
      :}
    |
    exp:e1 DIVIDE exp:e2
      {: RESULT = new DivideNode(e1, e2);
      :}
    |
    exp:e1 AND exp:e2
      {: RESULT = new AndNode(e1, e2);
      :}
    |
    exp:e1 OR exp:e2
      {: RESULT = new OrNode(e1, e2);
      :}
		|
    exp:e1 EQUALS exp:e2
      {: RESULT = new EqualsNode(e1, e2);
      :}
		|
    exp:e1 NOTEQUALS exp:e2
      {: RESULT = new NotEqualsNode(e1, e2);
      :}
		|
    exp:e1 LESS exp:e2
      {: RESULT = new LessNode(e1, e2);
      :}
		|
    exp:e1 GREATER exp:e2
      {: RESULT = new GreaterNode(e1, e2);
      :}
		|
    exp:e1 LESSEQ exp:e2
      {: RESULT = new LessEqNode(e1, e2);
      :}
		|
    exp:e1 GREATEREQ exp:e2
      {: RESULT = new GreaterEqNode(e1, e2);
      :}
		|
    term:t
      {: RESULT = t;
      :}
		;

assign_exp	::=
    id:i ASSIGN exp:e
      {: RESULT = new AssignNode(i, e);
      :}
		;

term		::=
    id:i
      {: RESULT = i;
      :}
		|
    MINUS term:t
      {: RESULT = new UnaryMinusNode(t);
      :}
    |
    NOT term:t
      {: RESULT = new NotNode(t);
      :}
		|
    id:i PLUSPLUS
      {: RESULT = new PlusPlusNode(i);
      :}
		|
    id:i MINUSMINUS
      {: RESULT = new MinusMinusNode(i);
      :}
    |
    INTLITERAL:lit
      {: RESULT = new IntLitNode(lit.linenum, lit.charnum, lit.intVal);
      :}
    |
    DBLLITERAL:lit
      {: RESULT = new DblLitNode(lit.linenum, lit.charnum, lit.dblVal);
      :}
    |
    STRINGLITERAL:s
      {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
      :}
    |
    LPAREN exp:e RPAREN
      {: RESULT = e;
      :}
		|
    fncall:f
      {: RESULT = f;
      :}
		;

actualList	::=
    exp:e
      {:
        LinkedList<ExpNode> lst = new LinkedList<ExpNode>();
        lst.addLast(e);
        RESULT = lst;
      :}
		|
    actualList:lst COMMA exp:e
      {:
        lst.addLast(e);
        RESULT = lst;
      :}
		;

type		::=
    INT
      {: RESULT = new IntNode();
      :}
    | DBL
      {: RESULT = new DblNode();
      :}
    | VOID
      {: RESULT = new VoidNode();
      :}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;
