/**********************************************************************
 Java CUP specification for a parser for Little programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}

:};


/* Terminals (tokens returned by the scanner) */
terminal 	        INT;
terminal 	        VOID;
terminal 	        DBL;
terminal 	        IF;
terminal 	        ELSE;
terminal 	        WHILE;
terminal 	        RETURN;
terminal 	        SCANF;
terminal 	        PRINTF;
terminal 	        INT_FORMAT;
terminal 	        DBL_FORMAT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal DblLitTokenVal DBLLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal 	        LCURLY;
terminal 	        RCURLY;
terminal 	        LPAREN;
terminal 	        RPAREN;
terminal 	        COMMA;
terminal 	        ASSIGN;
terminal 	        SEMICOLON;
terminal 	        PLUS;
terminal 	        MINUS;
terminal 	        STAR;
terminal 	        DIVIDE;
terminal 	        PLUSPLUS;
terminal 	        MINUSMINUS;
terminal 	        NOT;
terminal 	        AND;
terminal 	        OR;
terminal 	        EQUALS;
terminal 	        NOTEQUALS;
terminal 	        LESS;
terminal 	        GREATER;
terminal 	        LESSEQ;
terminal 	        GREATEREQ;
terminal 	        AMPERSAND;

/* Non-terminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

non terminal ProgramNode      program;
non terminal LinkedList	      declList;
non terminal DeclNode	      decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode	      type;
non terminal IdNode	      id;

non terminal LinkedList        varDeclList ;
non terminal FnDeclNode        fnDecl      ;
non terminal FormalsListNode   formals     ;
non terminal LinkedList        formalsList ;
non terminal FormalDeclNode    formalDecl  ;
non terminal FnBodyNode        fnBody      ;
non terminal LinkedList        stmtList    ;
non terminal StmtNode          stmt        ;
non terminal CallExpNode       fncall      ;
non terminal ExpNode           exp         ;
non terminal AssignExpNode     assign_exp  ;
non terminal TermNode          term        ;
non terminal LinkedList        actualList  ;

/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left STAR, DIVIDE;

start with program;

/* grammar with actions
 *
 * NOTE: add more grammar rules below
 */

program		::= declList: d
		{: RESULT = new ProgramNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: dl.addLast(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<DeclNode>();
		:}
		;

decl		::=
    varDecl:v
      {: RESULT = v;
      :}
    |
    fnDecl:f
      {: RESULT = f;
      :}
		;

varDeclList ::=
    varDeclList:dl varDecl:d
      {: dl.addLast(d);
         RESULT = dl;
      :}
    | /* epsilon */
      {: RESULT = new LinkedList<DeclNode>();
      :}
    ;

varDecl		::= type:t id:i SEMICOLON
		{: RESULT = new VarDeclNode(t, i);
		:}
		;

fnDecl ::= type:t id:name formals:args fnBody:body
    {: RESULT = new FnDeclNode(t, name, args, body);
    :}
    ;

formals ::=
    LPAREN RPAREN
      {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
      :}
    |
    LPAREN formalsList:dl RPAREN
      {: RESULT = new FormalsListNode(dl);
      :}
    ;

formalsList	::= 
    formalDecl:d
      {:
        LinkedList<FormalDeclNode> dl = new LinkedList<FormalDeclNode>();
        dl.addLast(d);
        RESULT = dl;
      :}
		|
    formalDecl:d COMMA formalsList:dl
      {: dl.addLast(d);
         RESULT = dl;
      :}
		;

formalDecl	::=
    type:t id:i
      {: RESULT = new FormalDeclNode(t, i);
      :}
		;

fnBody		::= 
    LCURLY varDeclList:vdl stmtList:sdl RCURLY
    {:
      RESULT = new FnBodyNode(new DeclListNode(vdl), new StmtListNode(sdl));
    :}
		;

stmtList	::= 
    stmtList:sl stmt:s
    {:
      sl.addLast(s);
      RESULT = sl;
    :}
		| /* epsilon */
    {:
      RESULT = new LinkedList<StmtNode>();
    :}
		;

stmt		::= assign_exp SEMICOLON
		| PLUSPLUS id SEMICOLON
		| MINUSMINUS id SEMICOLON
		| id PLUSPLUS SEMICOLON
		| id MINUSMINUS SEMICOLON
	        | SCANF LPAREN INT_FORMAT COMMA AMPERSAND id RPAREN SEMICOLON
	        | SCANF LPAREN DBL_FORMAT COMMA AMPERSAND id RPAREN SEMICOLON
		| PRINTF LPAREN INT_FORMAT COMMA exp RPAREN SEMICOLON
		| PRINTF LPAREN DBL_FORMAT COMMA exp RPAREN SEMICOLON
		| PRINTF LPAREN STRINGLITERAL RPAREN SEMICOLON
	        | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
	        | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
	        | WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
		| RETURN exp SEMICOLON
		| RETURN SEMICOLON
		| fncall SEMICOLON
		;

type		::=
    INT
      {: RESULT = new IntNode();
      :}
    | DBL
      {: RESULT = new DblNode();
      :}
    | VOID
      {: RESULT = new VoidNode();
      :}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;
