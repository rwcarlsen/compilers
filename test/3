
package rwctest;

import java.lang.reflect.*;

public class RobertTest {

  private int testCount;
  private int failCount;
  private int passCount;

  public void go(String subname) {
    RobertTest test = new RobertTest

    try {
      ClassLoader loader = ClassLoader.getSystemClassLoader();
      loader.setDefaultAssertionStatus(true);

      Object arglist[] = new Object[0];
      Class<?> c = loader.loadClass(subname);
      Object t = c.newInstance();

      Method[] allMethods = c.getDeclaredMethods();
      for (Method m : allMethods) {
        String mname = m.getName();
        if (!mname.startsWith("test")) {
          continue;
        }

        this.testCount += 1;
        try {
          m.setAccessible(true);
          Object o = m.invoke(t, arglist);
          printPassed(mname);
          this.passCount += 1;
        } catch (InvocationTargetException x) {
          Throwable cause = x.getCause();
          System.out.format("invocation of %s failed: %s%n",
              mname, cause.getMessage());
        } catch (AssertionError err) {
          this.failCount += 1;
          printFailed(mname, err);
          System.out.println(err);
        }
      }
    } catch (Exception err) {
      System.out.println(err);
      err.printStackTrace();
    }
  }

  private void printPassed(String methodName) {
    System.out.println("\033[1;32m" + methodName.replace("test", "") + ": PASSED");
  }

  private void printFailed(String methodName, AssertionError err) {
    System.out.println("\033[31m" + methodName.replace("test", "") + ": FAILED\r\n");
    System.out.println(err);
    System.out.println(err.getStackTrace());
  }

}
